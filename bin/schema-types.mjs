// @ts-check
import { compileFromFile } from 'json-schema-to-typescript'
import * as fs from 'fs/promises'
import meow from 'meow'
import { createRequire } from 'module'
import path from 'path'

/** ********************************************************
 *
 * This script goes through the json-schemas and generates
 * types for those schemas
 *
 ***********************************************************/

const cli = meow(
	`
	Tool to generate typescript types from blueprint config schemas
	Usage
		$ blueprint-schema-types <search-path> <output-path>
	Examples
		$ blueprint-schema-types ./src/$schemas/generated ./src/generated/types
`,
	{
		importMeta: import.meta,
	}
)

const searchPath = cli.input[0]
const outputPath = cli.input[1]

if (!searchPath || !outputPath) {
	cli.showHelp()
	process.exit(1)
}

const BANNER =
	'/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run "yarn generate-schema-types" to regenerate this file.\n */\n'

let PrettierConf = undefined
try {
	const require = createRequire(import.meta.url)
	const confPath = require.resolve('@sofie-automation/code-standard-preset/.prettierrc.json')
	PrettierConf = JSON.parse(await fs.readFile(confPath, 'utf8'))
} catch (e) {
	console.log(e)
	console.warn(`Failed to resolve prettier config path, skipping prettier formatting`)
}

await fs.mkdir(outputPath, { recursive: true })

const basePath = path.resolve(searchPath)
const resolvedOutputPath = path.resolve(outputPath)
const files = (await fs.readdir(basePath, { withFileTypes: true }))
	.filter((c) => c.isFile() && c.name.endsWith('.json'))
	.map((d) => d.name)

for (const filename of files) {
	try {
		const schema = await compileFromFile(path.join(basePath, filename), {
			additionalProperties: false,
			style: PrettierConf,
			bannerComment: '',
			enableConstEnums: false,
		})

		await fs.writeFile(path.join(resolvedOutputPath, path.parse(filename).name + '.ts'), BANNER + '\n' + schema)
	} catch (e) {
		console.error(`Error while generating ${filename}, continuing...`)
		console.error(e)
	}
}
